(function(e, a) { for(var i in a) e[i] = a[i]; }(window, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 7);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/lib/lib3ds.js":
/*!***************************!*\
  !*** ./src/lib/lib3ds.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar NULL_CHUNK = 0x0000;\nvar M3DMAGIC = 0x4D4D;\n/*3DS file*/\n\nvar SMAGIC = 0x2D2D;\nvar LMAGIC = 0x2D3D;\nvar MLIBMAGIC = 0x3DAA;\n/*MLI file*/\n\nvar MATMAGIC = 0x3DFF;\nvar CMAGIC = 0xC23D;\n/*PRJ file*/\n\nvar M3D_VERSION = 0x0002;\nvar M3D_KFVERSION = 0x0005;\nvar COLOR_F = 0x0010;\nvar COLOR_24 = 0x0011;\nvar LIN_COLOR_24 = 0x0012;\nvar LIN_COLOR_F = 0x0013;\nvar INT_PERCENTAGE = 0x0030;\nvar FLOAT_PERCENTAGE = 0x0031;\nvar MDATA = 0x3D3D;\nvar MESH_VERSION = 0x3D3E;\nvar MASTER_SCALE = 0x0100;\nvar LO_SHADOW_BIAS = 0x1400;\nvar HI_SHADOW_BIAS = 0x1410;\nvar SHADOW_MAP_SIZE = 0x1420;\nvar SHADOW_SAMPLES = 0x1430;\nvar SHADOW_RANGE = 0x1440;\nvar SHADOW_FILTER = 0x1450;\nvar RAY_BIAS = 0x1460;\nvar O_CONSTS = 0x1500;\nvar AMBIENT_LIGHT = 0x2100;\nvar BIT_MAP = 0x1100;\nvar SOLID_BGND = 0x1200;\nvar V_GRADIENT = 0x1300;\nvar USE_BIT_MAP = 0x1101;\nvar USE_SOLID_BGND = 0x1201;\nvar USE_V_GRADIENT = 0x1301;\nvar FOG = 0x2200;\nvar FOG_BGND = 0x2210;\nvar LAYER_FOG = 0x2302;\nvar DISTANCE_CUE = 0x2300;\nvar DCUE_BGND = 0x2310;\nvar USE_FOG = 0x2201;\nvar USE_LAYER_FOG = 0x2303;\nvar USE_DISTANCE_CUE = 0x2301;\nvar MAT_ENTRY = 0xAFFF;\nvar MAT_NAME = 0xA000;\nvar MAT_AMBIENT = 0xA010;\nvar MAT_DIFFUSE = 0xA020;\nvar MAT_SPECULAR = 0xA030;\nvar MAT_SHININESS = 0xA040;\nvar MAT_SHIN2PCT = 0xA041;\nvar MAT_TRANSPARENCY = 0xA050;\nvar MAT_XPFALL = 0xA052;\nvar MAT_USE_XPFALL = 0xA240;\nvar MAT_REFBLUR = 0xA053;\nvar MAT_SHADING = 0xA100;\nvar MAT_USE_REFBLUR = 0xA250;\nvar MAT_SELF_ILLUM = 0xA084;\nvar MAT_TWO_SIDE = 0xA081;\nvar MAT_DECAL = 0xA082;\nvar MAT_ADDITIVE = 0xA083;\nvar MAT_WIRE = 0xA085;\nvar MAT_FACEMAP = 0xA088;\nvar MAT_TRANSFALLOFF_IN = 0xA08A;\nvar MAT_PHONGSOFT = 0xA08C;\nvar MAT_WIREABS = 0xA08E;\nvar MAT_WIRE_SIZE = 0xA087;\nvar MAT_TEXMAP = 0xA200;\nvar MAT_SXP_TEXT_DATA = 0xA320;\nvar MAT_TEXMASK = 0xA33E;\nvar MAT_SXP_TEXTMASK_DATA = 0xA32A;\nvar MAT_TEX2MAP = 0xA33A;\nvar MAT_SXP_TEXT2_DATA = 0xA321;\nvar MAT_TEX2MASK = 0xA340;\nvar MAT_SXP_TEXT2MASK_DATA = 0xA32C;\nvar MAT_OPACMAP = 0xA210;\nvar MAT_SXP_OPAC_DATA = 0xA322;\nvar MAT_OPACMASK = 0xA342;\nvar MAT_SXP_OPACMASK_DATA = 0xA32E;\nvar MAT_BUMPMAP = 0xA230;\nvar MAT_SXP_BUMP_DATA = 0xA324;\nvar MAT_BUMPMASK = 0xA344;\nvar MAT_SXP_BUMPMASK_DATA = 0xA330;\nvar MAT_SPECMAP = 0xA204;\nvar MAT_SXP_SPEC_DATA = 0xA325;\nvar MAT_SPECMASK = 0xA348;\nvar MAT_SXP_SPECMASK_DATA = 0xA332;\nvar MAT_SHINMAP = 0xA33C;\nvar MAT_SXP_SHIN_DATA = 0xA326;\nvar MAT_SHINMASK = 0xA346;\nvar MAT_SXP_SHINMASK_DATA = 0xA334;\nvar MAT_SELFIMAP = 0xA33D;\nvar MAT_SXP_SELFI_DATA = 0xA328;\nvar MAT_SELFIMASK = 0xA34A;\nvar MAT_SXP_SELFIMASK_DATA = 0xA336;\nvar MAT_REFLMAP = 0xA220;\nvar MAT_REFLMASK = 0xA34C;\nvar MAT_SXP_REFLMASK_DATA = 0xA338;\nvar MAT_ACUBIC = 0xA310;\nvar MAT_MAPNAME = 0xA300;\nvar MAT_MAP_TILING = 0xA351;\nvar MAT_MAP_TEXBLUR = 0xA353;\nvar MAT_MAP_USCALE = 0xA354;\nvar MAT_MAP_VSCALE = 0xA356;\nvar MAT_MAP_UOFFSET = 0xA358;\nvar MAT_MAP_VOFFSET = 0xA35A;\nvar MAT_MAP_ANG = 0xA35C;\nvar MAT_MAP_COL1 = 0xA360;\nvar MAT_MAP_COL2 = 0xA362;\nvar MAT_MAP_RCOL = 0xA364;\nvar MAT_MAP_GCOL = 0xA366;\nvar MAT_MAP_BCOL = 0xA368;\nvar NAMED_OBJECT = 0x4000;\nvar N_DIRECT_LIGHT = 0x4600;\nvar DL_OFF = 0x4620;\nvar DL_OUTER_RANGE = 0x465A;\nvar DL_INNER_RANGE = 0x4659;\nvar DL_MULTIPLIER = 0x465B;\nvar DL_EXCLUDE = 0x4654;\nvar DL_ATTENUATE = 0x4625;\nvar DL_SPOTLIGHT = 0x4610;\nvar DL_SPOT_ROLL = 0x4656;\nvar DL_SHADOWED = 0x4630;\nvar DL_LOCAL_SHADOW2 = 0x4641;\nvar DL_SEE_CONE = 0x4650;\nvar DL_SPOT_RECTANGULAR = 0x4651;\nvar DL_SPOT_ASPECT = 0x4657;\nvar DL_SPOT_PROJECTOR = 0x4653;\nvar DL_SPOT_OVERSHOOT = 0x4652;\nvar DL_RAY_BIAS = 0x4658;\nvar DL_RAYSHAD = 0x4627;\nvar N_CAMERA = 0x4700;\nvar CAM_SEE_CONE = 0x4710;\nvar CAM_RANGES = 0x4720;\nvar OBJ_HIDDEN = 0x4010;\nvar OBJ_VIS_LOFTER = 0x4011;\nvar OBJ_DOESNT_CAST = 0x4012;\nvar OBJ_DONT_RECVSHADOW = 0x4017;\nvar OBJ_MATTE = 0x4013;\nvar OBJ_FAST = 0x4014;\nvar OBJ_PROCEDURAL = 0x4015;\nvar OBJ_FROZEN = 0x4016;\nvar N_TRI_OBJECT = 0x4100;\nvar POINT_ARRAY = 0x4110;\nvar POINT_FLAG_ARRAY = 0x4111;\nvar FACE_ARRAY = 0x4120;\nvar MSH_MAT_GROUP = 0x4130;\nvar SMOOTH_GROUP = 0x4150;\nvar MSH_BOXMAP = 0x4190;\nvar TEX_VERTS = 0x4140;\nvar MESH_MATRIX = 0x4160;\nvar MESH_COLOR = 0x4165;\nvar MESH_TEXTURE_INFO = 0x4170;\nvar KFDATA = 0xB000;\nvar KFHDR = 0xB00A;\nvar KFSEG = 0xB008;\nvar KFCURTIME = 0xB009;\nvar AMBIENT_NODE_TAG = 0xB001;\nvar OBJECT_NODE_TAG = 0xB002;\nvar CAMERA_NODE_TAG = 0xB003;\nvar TARGET_NODE_TAG = 0xB004;\nvar LIGHT_NODE_TAG = 0xB005;\nvar L_TARGET_NODE_TAG = 0xB006;\nvar SPOTLIGHT_NODE_TAG = 0xB007;\nvar NODE_ID = 0xB030;\nvar NODE_HDR = 0xB010;\nvar PIVOT = 0xB013;\nvar INSTANCE_NAME = 0xB011;\nvar MORPH_SMOOTH = 0xB015;\nvar BOUNDBOX = 0xB014;\nvar POS_TRACK_TAG = 0xB020;\nvar COL_TRACK_TAG = 0xB025;\nvar ROT_TRACK_TAG = 0xB021;\nvar SCL_TRACK_TAG = 0xB022;\nvar MORPH_TRACK_TAG = 0xB026;\nvar FOV_TRACK_TAG = 0xB023;\nvar ROLL_TRACK_TAG = 0xB024;\nvar HOT_TRACK_TAG = 0xB027;\nvar FALL_TRACK_TAG = 0xB028;\nvar HIDE_TRACK_TAG = 0xB029;\nvar POLY_2D = 0x5000;\nvar SHAPE_OK = 0x5010;\nvar SHAPE_NOT_OK = 0x5011;\nvar SHAPE_HOOK = 0x5020;\nvar PATH_3D = 0x6000;\nvar PATH_MATRIX = 0x6005;\nvar SHAPE_2D = 0x6010;\nvar M_SCALE = 0x6020;\nvar M_TWIST = 0x6030;\nvar M_TEETER = 0x6040;\nvar M_FIT = 0x6050;\nvar M_BEVEL = 0x6060;\nvar XZ_CURVE = 0x6070;\nvar YZ_CURVE = 0x6080;\nvar INTERPCT = 0x6090;\nvar DEFORM_LIMIT = 0x60A0;\nvar USE_CONTOUR = 0x6100;\nvar USE_TWEEN = 0x6110;\nvar USE_SCALE = 0x6120;\nvar USE_TWIST = 0x6130;\nvar USE_TEETER = 0x6140;\nvar USE_FIT = 0x6150;\nvar USE_BEVEL = 0x6160;\nvar DEFAULT_VIEW = 0x3000;\nvar VIEW_TOP = 0x3010;\nvar VIEW_BOTTOM = 0x3020;\nvar VIEW_LEFT = 0x3030;\nvar VIEW_RIGHT = 0x3040;\nvar VIEW_FRONT = 0x3050;\nvar VIEW_BACK = 0x3060;\nvar VIEW_USER = 0x3070;\nvar VIEW_CAMERA = 0x3080;\nvar VIEW_WINDOW = 0x3090;\nvar VIEWPORT_LAYOUT_OLD = 0x7000;\nvar VIEWPORT_DATA_OLD = 0x7010;\nvar VIEWPORT_LAYOUT = 0x7001;\nvar VIEWPORT_DATA = 0x7011;\nvar VIEWPORT_DATA_3 = 0x7012;\nvar VIEWPORT_SIZE = 0x7020;\nvar NETWORK_VIEW = 0x7030;\n\nvar Lib3ds = function Lib3ds(element, debug) {\n  this.element = element;\n  this.debug = debug != undefined ? debug : false;\n  this.position = 0;\n  this.meshes = [];\n  this.materials = {};\n};\n\nvar _jDataView;\n\n(function (exports) {\n  var global = this;\n  var compatibility = {\n    ArrayBuffer: typeof ArrayBuffer !== 'undefined',\n    DataView: typeof DataView !== 'undefined' && ('getFloat64' in DataView.prototype || // Chrome\n    'getFloat64' in new DataView(new ArrayBuffer(1))),\n    // Node\n    // NodeJS Buffer in v0.5.5 and newer\n    NodeBuffer: typeof Buffer !== 'undefined' && 'readInt16LE' in Buffer.prototype\n  };\n  var dataTypes = {\n    'Int8': 1,\n    'Int16': 2,\n    'Int32': 4,\n    'Uint8': 1,\n    'Uint16': 2,\n    'Uint32': 4,\n    'Float32': 4,\n    'Float64': 8\n  };\n  var nodeNaming = {\n    'Int8': 'Int8',\n    'Int16': 'Int16',\n    'Int32': 'Int32',\n    'Uint8': 'UInt8',\n    'Uint16': 'UInt16',\n    'Uint32': 'UInt32',\n    'Float32': 'Float',\n    'Float64': 'Double'\n  };\n\n  _jDataView = function jDataView(buffer, byteOffset, byteLength, littleEndian) {\n    if (!(this instanceof _jDataView)) {\n      throw new Error(\"jDataView constructor may not be called as a function\");\n    }\n\n    this.buffer = buffer = _jDataView.wrapBuffer(buffer); // Check parameters and existing functionnalities\n\n    this._isArrayBuffer = compatibility.ArrayBuffer && buffer instanceof ArrayBuffer;\n    this._isDataView = compatibility.DataView && this._isArrayBuffer;\n    this._isNodeBuffer = compatibility.NodeBuffer && buffer instanceof Buffer; // Handle Type Errors\n\n    if (!this._isNodeBuffer && !this._isArrayBuffer && !(buffer instanceof Array)) {\n      throw new TypeError('jDataView buffer has an incompatible type');\n    } // Default Values\n\n\n    this._littleEndian = Boolean(littleEndian);\n    var bufferLength = this._isArrayBuffer ? buffer.byteLength : buffer.length;\n\n    if (byteOffset === undefined) {\n      byteOffset = 0;\n    }\n\n    this.byteOffset = byteOffset;\n\n    if (byteLength === undefined) {\n      byteLength = bufferLength - byteOffset;\n    }\n\n    this.byteLength = byteLength;\n\n    if (!this._isDataView) {\n      // Do additional checks to simulate DataView\n      if (typeof byteOffset !== 'number') {\n        throw new TypeError('jDataView byteOffset is not a number');\n      }\n\n      if (typeof byteLength !== 'number') {\n        throw new TypeError('jDataView byteLength is not a number');\n      }\n\n      if (byteOffset < 0) {\n        throw new Error('jDataView byteOffset is negative');\n      }\n\n      if (byteLength < 0) {\n        throw new Error('jDataView byteLength is negative');\n      }\n    } // Instanciate\n\n\n    if (this._isDataView) {\n      this._view = new DataView(buffer, byteOffset, byteLength);\n    }\n\n    this._start = byteOffset;\n\n    if (byteOffset + byteLength > bufferLength) {\n      throw new Error(\"jDataView (byteOffset + byteLength) value is out of bounds\");\n    }\n\n    this._offset = 0; // Create uniform reading methods (wrappers) for the following data types\n\n    if (this._isDataView) {\n      // DataView: we use the direct method\n      for (var type in dataTypes) {\n        if (!dataTypes.hasOwnProperty(type)) {\n          continue;\n        }\n\n        (function (type, view) {\n          var size = dataTypes[type];\n\n          view['get' + type] = function (byteOffset, littleEndian) {\n            // Handle the lack of endianness\n            if (littleEndian === undefined) {\n              littleEndian = view._littleEndian;\n            } // Handle the lack of byteOffset\n\n\n            if (byteOffset === undefined) {\n              byteOffset = view._offset;\n            } // Move the internal offset forward\n\n\n            view._offset = byteOffset + size;\n            return view._view['get' + type](byteOffset, littleEndian);\n          };\n\n          view['set' + type] = function (byteOffset, value, littleEndian) {\n            // Handle the lack of endianness\n            if (littleEndian === undefined) {\n              littleEndian = view._littleEndian;\n            } // Handle the lack of byteOffset\n\n\n            if (byteOffset === undefined) {\n              byteOffset = view._offset;\n            } // Move the internal offset forward\n\n\n            view._offset = byteOffset + size;\n\n            view._view['set' + type](byteOffset, value, littleEndian);\n          };\n        })(type, this);\n      }\n    } else if (this._isNodeBuffer) {\n      for (var type in dataTypes) {\n        if (!dataTypes.hasOwnProperty(type)) {\n          continue;\n        }\n\n        (function (type, view) {\n          var size = dataTypes[type];\n\n          view['get' + type] = function (byteOffset, littleEndian) {\n            // Handle the lack of endianness\n            if (littleEndian === undefined) {\n              littleEndian = view._littleEndian;\n            } // Handle the lack of byteOffset\n\n\n            if (byteOffset === undefined) {\n              byteOffset = view._offset;\n            }\n\n            var name;\n\n            if (type === 'Int8' || type === 'Uint8') {\n              name = 'read' + nodeNaming[type];\n            } else if (littleEndian) {\n              name = 'read' + nodeNaming[type] + 'LE';\n            } else {\n              name = 'read' + nodeNaming[type] + 'BE';\n            } // Move the internal offset forward\n\n\n            view._offset = byteOffset + size;\n            return view.buffer[name](view._start + byteOffset);\n          };\n\n          view['set' + type] = function (byteOffset, value, littleEndian) {\n            // Handle the lack of endianness\n            if (littleEndian === undefined) {\n              littleEndian = view._littleEndian;\n            } // Handle the lack of byteOffset\n\n\n            if (byteOffset === undefined) {\n              byteOffset = view._offset;\n            }\n\n            var name;\n\n            if (type === 'Int8' || type === 'Uint8') {\n              name = 'write' + nodeNaming[type];\n            } else if (littleEndian) {\n              name = 'write' + nodeNaming[type] + 'LE';\n            } else {\n              name = 'write' + nodeNaming[type] + 'BE';\n            } // Move the internal offset forward\n\n\n            view._offset = byteOffset + size;\n            view.buffer[name](value, view._start + byteOffset);\n          };\n        })(type, this);\n      }\n    } else if (this._isArrayBuffer) {\n      for (var type in dataTypes) {\n        if (!dataTypes.hasOwnProperty(type)) {\n          continue;\n        }\n\n        (function (type, view) {\n          var size = dataTypes[type];\n\n          view['get' + type] = function (byteOffset, littleEndian) {\n            // Handle the lack of endianness\n            if (littleEndian === undefined) {\n              littleEndian = view._littleEndian;\n            } // Handle the lack of byteOffset\n\n\n            if (byteOffset === undefined) {\n              byteOffset = view._offset;\n            } // ArrayBuffer: we use a typed array of size 1 from original buffer if alignment is good and from slice when it's not\n\n\n            var buffer, offset;\n\n            if (size === 1 || (view._start + byteOffset) % size === 0 && littleEndian) {\n              buffer = view.buffer;\n              offset = view._start + byteOffset;\n              view._offset = byteOffset + size;\n            } else {\n              // standard decoding functions are still faster than JS implementations, so let's use them via hack\n              buffer = new Uint8Array(view.getBytes(size, byteOffset, littleEndian)).buffer;\n              offset = 0;\n            }\n\n            return new global[type + 'Array'](buffer, offset, 1)[0];\n          };\n\n          view['set' + type] = function (byteOffset, value, littleEndian) {\n            // Handle the lack of endianness\n            if (littleEndian === undefined) {\n              littleEndian = view._littleEndian;\n            } // Handle the lack of byteOffset\n\n\n            if (byteOffset === undefined) {\n              byteOffset = view._offset;\n            } // ArrayBuffer: we use a typed array of size 1 from original buffer if alignment is good and from slice when it's not\n\n\n            var TypedArray = global[type + 'Array'];\n\n            if (size === 1 || (view._start + byteOffset) % size === 0 && littleEndian) {\n              new TypedArray(view.buffer, view._start + byteOffset, 1)[0] = value;\n              view._offset = byteOffset + size;\n            } else {\n              // standard encoding functions are still faster than JS implementations, so let's use them via hack\n              var bytes = new Uint8Array(size);\n              new TypedArray(bytes.buffer, 0, 1)[0] = value;\n              view.setBytes(byteOffset, bytes, littleEndian);\n            }\n          };\n        })(type, this);\n      }\n    } else {\n      for (var type in dataTypes) {\n        if (!dataTypes.hasOwnProperty(type)) {\n          continue;\n        }\n\n        (function (type, view) {\n          var size = dataTypes[type];\n\n          view['get' + type] = function (byteOffset, littleEndian) {\n            // Handle the lack of endianness\n            if (littleEndian === undefined) {\n              littleEndian = view._littleEndian;\n            } // Handle the lack of byteOffset\n\n\n            if (byteOffset === undefined) {\n              byteOffset = view._offset;\n            } // Error checking:\n\n\n            if (typeof byteOffset !== 'number') {\n              throw new TypeError('jDataView byteOffset is not a number');\n            }\n\n            if (byteOffset + size > view.byteLength) {\n              throw new Error('jDataView (byteOffset + size) value is out of bounds');\n            }\n\n            return view['_get' + type](byteOffset, littleEndian);\n          };\n\n          view['set' + type] = function (byteOffset, value, littleEndian) {\n            // Handle the lack of endianness\n            if (littleEndian === undefined) {\n              littleEndian = view._littleEndian;\n            } // Handle the lack of byteOffset\n\n\n            if (byteOffset === undefined) {\n              byteOffset = view._offset;\n            } // Move the internal offset forward\n\n\n            view._offset = byteOffset + size; // Error checking:\n\n            if (typeof byteOffset !== 'number') {\n              throw new TypeError('jDataView byteOffset is not a number');\n            }\n\n            if (byteOffset + size > view.byteLength) {\n              throw new Error('jDataView (byteOffset + size) value is out of bounds');\n            }\n\n            view['_set' + type.replace('Uint', 'Int')](byteOffset, value, littleEndian);\n          };\n        })(type, this);\n      }\n    }\n\n    for (var type in dataTypes) {\n      if (!dataTypes.hasOwnProperty(type)) {\n        continue;\n      }\n\n      (function (type, view) {\n        view['write' + type] = function (value, littleEndian) {\n          this['set' + type](undefined, value, littleEndian);\n        };\n      })(type, this);\n    }\n  }; // mostly internal function for wrapping any supported input (String or Array-like) to best suitable buffer format\n\n\n  _jDataView.wrapBuffer = function (buffer) {\n    switch (_typeof(buffer)) {\n      case 'string':\n        buffer = Array.prototype.map.call(buffer, function (_char) {\n          return _char.charCodeAt(0) & 0xff;\n        });\n        break;\n\n      case 'number':\n        buffer = {\n          length: buffer\n        };\n        break;\n    }\n\n    if ('length' in buffer && !(compatibility.NodeBuffer && buffer instanceof Buffer || compatibility.ArrayBuffer && buffer instanceof ArrayBuffer)) {\n      if (compatibility.NodeBuffer) {\n        buffer = new Buffer(buffer);\n      } else if (compatibility.ArrayBuffer) {\n        var bytes = buffer instanceof Uint8Array ? buffer : new Uint8Array(buffer);\n        buffer = bytes.buffer;\n      } else {\n        if (!(buffer instanceof Array)) {\n          buffer = Array.prototype.slice.call(buffer);\n        } // as simple Array may contain non-byte values (incl. undefined)\n\n\n        for (var i = 0, length = buffer.length; i < length; i++) {\n          buffer[i] &= 0xff;\n        }\n      }\n    }\n\n    return buffer;\n  }; // left for backward compatibility\n\n\n  _jDataView.createBuffer = function () {\n    return _jDataView.wrapBuffer(arguments);\n  };\n\n  _jDataView.prototype = {\n    compatibility: compatibility,\n    // Helpers\n    _getBytes: function _getBytes(length, byteOffset, littleEndian) {\n      var result; // Handle the lack of endianness\n\n      if (littleEndian === undefined) {\n        littleEndian = this._littleEndian;\n      } // Handle the lack of byteOffset\n\n\n      if (byteOffset === undefined) {\n        byteOffset = this._offset;\n      }\n\n      if (length === undefined) {\n        length = this.byteLength - byteOffset;\n      } // Error Checking\n\n\n      if (typeof byteOffset !== 'number') {\n        throw new TypeError('jDataView byteOffset is not a number');\n      }\n\n      if (length < 0 || byteOffset + length > this.byteLength) {\n        throw new Error('jDataView length or (byteOffset+length) value is out of bounds');\n      }\n\n      byteOffset += this._start;\n\n      if (this._isArrayBuffer) {\n        result = new Uint8Array(this.buffer, byteOffset, length);\n      } else {\n        result = this.buffer.slice(byteOffset, byteOffset + length);\n      }\n\n      if (!littleEndian && length > 1) {\n        if (!(result instanceof Array)) {\n          result = Array.prototype.slice.call(result);\n        }\n\n        result.reverse();\n      }\n\n      this._offset = byteOffset - this._start + length;\n      return result;\n    },\n    // wrapper for external calls (do not return inner buffer directly to prevent it's modifying)\n    getBytes: function getBytes(length, byteOffset, littleEndian) {\n      var result = this._getBytes.apply(this, arguments);\n\n      if (!(result instanceof Array)) {\n        result = Array.prototype.slice.call(result);\n      }\n\n      return result;\n    },\n    setBytes: function setBytes(byteOffset, bytes, littleEndian) {\n      var length = bytes.length; // Handle the lack of endianness\n\n      if (littleEndian === undefined) {\n        littleEndian = this._littleEndian;\n      } // Handle the lack of byteOffset\n\n\n      if (byteOffset === undefined) {\n        byteOffset = this._offset;\n      } // Error Checking\n\n\n      if (typeof byteOffset !== 'number') {\n        throw new TypeError('jDataView byteOffset is not a number');\n      }\n\n      if (length < 0 || byteOffset + length > this.byteLength) {\n        throw new Error('jDataView length or (byteOffset+length) value is out of bounds');\n      }\n\n      if (!littleEndian && length > 1) {\n        bytes = Array.prototype.slice.call(bytes).reverse();\n      }\n\n      byteOffset += this._start;\n\n      if (this._isArrayBuffer) {\n        new Uint8Array(this.buffer, byteOffset, length).set(bytes);\n      } else {\n        if (this._isNodeBuffer) {\n          new Buffer(bytes).copy(this.buffer, byteOffset);\n        } else {\n          for (var i = 0; i < length; i++) {\n            this.buffer[byteOffset + i] = bytes[i];\n          }\n        }\n      }\n\n      this._offset = byteOffset - this._start + length;\n    },\n    writeBytes: function writeBytes(bytes, littleEndian) {\n      this.setBytes(undefined, bytes, littleEndian);\n    },\n    getString: function getString(length, byteOffset) {\n      return String.fromCharCode.apply(null, this._getBytes(length, byteOffset, true));\n    },\n    setString: function setString(byteOffset, subString) {\n      this.setBytes(byteOffset, Array.prototype.map.call(subString, function (_char2) {\n        return _char2.charCodeAt(0) & 0xff;\n      }), true);\n    },\n    writeString: function writeString(subString) {\n      this.setString(undefined, subString);\n    },\n    getChar: function getChar(byteOffset) {\n      return this.getString(1, byteOffset);\n    },\n    setChar: function setChar(byteOffset, _char3) {\n      this.setString.apply(this, arguments);\n    },\n    writeChar: function writeChar(_char4) {\n      this.setChar(undefined, _char4);\n    },\n    tell: function tell() {\n      return this._offset;\n    },\n    seek: function seek(byteOffset) {\n      if (typeof byteOffset !== 'number') {\n        throw new TypeError('jDataView byteOffset is not a number');\n      }\n\n      if (byteOffset < 0 || byteOffset > this.byteLength) {\n        throw new Error('jDataView byteOffset value is out of bounds');\n      }\n\n      return this._offset = byteOffset;\n    },\n    slice: function slice(start, end, forceCopy) {\n      return forceCopy ? new _jDataView(this.getBytes(end - start, start), undefined, undefined, true) : new _jDataView(this.buffer, this._start + start, end - start, this._littleEndian);\n    },\n    // Compatibility functions on a String Buffer\n    _getFloat64: function _getFloat64(byteOffset, littleEndian) {\n      var b = this._getBytes(8, byteOffset, littleEndian),\n          sign = 1 - 2 * (b[7] >> 7),\n          exponent = ((b[7] << 1 & 0xff) << 3 | b[6] >> 4) - ((1 << 10) - 1),\n          // Binary operators such as | and << operate on 32 bit values, using + and Math.pow(2) instead\n      mantissa = (b[6] & 0x0f) * Math.pow(2, 48) + b[5] * Math.pow(2, 40) + b[4] * Math.pow(2, 32) + b[3] * Math.pow(2, 24) + b[2] * Math.pow(2, 16) + b[1] * Math.pow(2, 8) + b[0];\n\n      if (exponent === 1024) {\n        if (mantissa !== 0) {\n          return NaN;\n        } else {\n          return sign * Infinity;\n        }\n      }\n\n      if (exponent === -1023) {\n        // Denormalized\n        return sign * mantissa * Math.pow(2, -1022 - 52);\n      }\n\n      return sign * (1 + mantissa * Math.pow(2, -52)) * Math.pow(2, exponent);\n    },\n    _getFloat32: function _getFloat32(byteOffset, littleEndian) {\n      var b = this._getBytes(4, byteOffset, littleEndian),\n          sign = 1 - 2 * (b[3] >> 7),\n          exponent = (b[3] << 1 & 0xff | b[2] >> 7) - 127,\n          mantissa = (b[2] & 0x7f) << 16 | b[1] << 8 | b[0];\n\n      if (exponent === 128) {\n        if (mantissa !== 0) {\n          return NaN;\n        } else {\n          return sign * Infinity;\n        }\n      }\n\n      if (exponent === -127) {\n        // Denormalized\n        return sign * mantissa * Math.pow(2, -126 - 23);\n      }\n\n      return sign * (1 + mantissa * Math.pow(2, -23)) * Math.pow(2, exponent);\n    },\n    _getInt32: function _getInt32(byteOffset, littleEndian) {\n      var b = this._getBytes(4, byteOffset, littleEndian);\n\n      return b[3] << 24 | b[2] << 16 | b[1] << 8 | b[0];\n    },\n    _getUint32: function _getUint32(byteOffset, littleEndian) {\n      return this._getInt32(byteOffset, littleEndian) >>> 0;\n    },\n    _getInt16: function _getInt16(byteOffset, littleEndian) {\n      return this._getUint16(byteOffset, littleEndian) << 16 >> 16;\n    },\n    _getUint16: function _getUint16(byteOffset, littleEndian) {\n      var b = this._getBytes(2, byteOffset, littleEndian);\n\n      return b[1] << 8 | b[0];\n    },\n    _getInt8: function _getInt8(byteOffset) {\n      return this._getUint8(byteOffset) << 24 >> 24;\n    },\n    _getUint8: function _getUint8(byteOffset) {\n      return this._getBytes(1, byteOffset)[0];\n    },\n    _setBinaryFloat: function _setBinaryFloat(byteOffset, value, mantSize, expSize, littleEndian) {\n      var signBit = value < 0 ? 1 : 0,\n          exponent,\n          mantissa,\n          eMax = ~(-1 << expSize - 1),\n          eMin = 1 - eMax;\n\n      if (value < 0) {\n        value = -value;\n      }\n\n      if (value === 0) {\n        exponent = eMin - 1;\n        mantissa = 0;\n      } else if (isNaN(value)) {\n        exponent = eMax + 1;\n        mantissa = 1;\n      } else if (value === Infinity) {\n        exponent = eMax + 1;\n        mantissa = 0;\n      } else {\n        exponent = Math.floor(Math.log(value) / Math.LN2);\n\n        if (exponent > eMin && exponent <= eMax) {\n          mantissa = Math.floor((value * Math.pow(2, -exponent) - 1) * Math.pow(2, mantSize));\n        } else {\n          mantissa = Math.floor(value * Math.pow(2, mantSize - eMin));\n          exponent = eMin - 1;\n        }\n      }\n\n      exponent += eMax;\n      var b = [];\n\n      while (mantSize >= 8) {\n        b.push(mantissa % 256);\n        mantissa = Math.floor(mantissa / 256);\n        mantSize -= 8;\n      }\n\n      exponent = exponent << mantSize | mantissa;\n      expSize += mantSize;\n\n      while (expSize >= 8) {\n        b.push(exponent & 0xff);\n        exponent >>>= 8;\n        expSize -= 8;\n      }\n\n      b.push(signBit << expSize | exponent);\n      this.setBytes(byteOffset, b, littleEndian);\n    },\n    _setFloat32: function _setFloat32(byteOffset, value, littleEndian) {\n      this._setBinaryFloat(byteOffset, value, 23, 8, littleEndian);\n    },\n    _setFloat64: function _setFloat64(byteOffset, value, littleEndian) {\n      this._setBinaryFloat(byteOffset, value, 52, 11, littleEndian);\n    },\n    _setInt32: function _setInt32(byteOffset, value, littleEndian) {\n      this.setBytes(byteOffset, [value & 0xff, value >>> 8 & 0xff, value >>> 16 & 0xff, value >>> 24], littleEndian);\n    },\n    _setInt16: function _setInt16(byteOffset, value, littleEndian) {\n      this.setBytes(byteOffset, [value & 0xff, value >>> 8], littleEndian);\n    },\n    _setInt8: function _setInt8(byteOffset, value) {\n      this.setBytes(byteOffset, [value]);\n    }\n  };\n})();\n\n(function () {\n  var p = Lib3ds.prototype;\n\n  p.readFile = function (fileContents) {\n    this.position = 0;\n    this.meshes = [];\n    this.materials = {};\n    var data = new _jDataView(fileContents, 0, // offset\n    undefined, // byte length. let the library calculate that.\n    true); // little endian\n\n    var chunk = this.readChunk(data);\n    var c = 0;\n\n    switch (chunk.id) {\n      case MLIBMAGIC:\n      case CMAGIC:\n      case M3DMAGIC:\n        c = this.nextChunk(data, chunk);\n\n        while (c != 0) {\n          switch (c) {\n            case M3D_VERSION:\n              this.mesh_version = this.readDWord(data);\n              this.log(\"M3D_VERSION \" + this.mesh_version);\n              break;\n\n            case MDATA:\n              // Model data\n              this.resetPosition(data);\n              this.log(\"MDATA\");\n              this.readMDATA(data);\n              break;\n\n            case KFDATA: // Keyframe data\n\n            default:\n              this.log(\"Unknown chunk: \" + c.toString(16));\n              break;\n          }\n\n          c = this.nextChunk(data, chunk);\n        }\n\n        break;\n\n      default:\n        this.log(\"Unknown main chunk: \" + c.toString(16));\n        break;\n    }\n\n    this.log(\"parsed #\" + this.meshes.length + \" meshes!\");\n  };\n\n  p.readMDATA = function (data) {\n    var chunk = this.readChunk(data);\n    var c = this.nextChunk(data, chunk);\n\n    while (c != 0) {\n      switch (c) {\n        case MESH_VERSION:\n          this.mesh_version = this.readInt(data);\n          this.log(\"MESH_VERSION: \" + this.mesh_version);\n          break;\n\n        case MASTER_SCALE:\n          this.master_scale = this.readFloat(data);\n          this.log(\"MASTER_SCALE: \" + this.master_scale);\n          break;\n\n        case NAMED_OBJECT:\n          this.resetPosition(data);\n          this.log(\"NAMED OBJECT\");\n          this.readNamedObject(data);\n          break;\n\n        case MAT_ENTRY:\n          this.resetPosition(data);\n          this.log(\"MATERIAL ENTRY\");\n          this.readMaterialEntry(data);\n          break;\n\n        default:\n          this.log(\"Unknown MDATA chunk: \" + c.toString(16));\n          break;\n      }\n\n      c = this.nextChunk(data, chunk);\n    }\n  };\n\n  p.readMaterialEntry = function (data) {\n    var chunk = this.readChunk(data);\n    var c = this.nextChunk(data, chunk);\n    var material = new Lib3dsMaterial();\n\n    while (c != 0) {\n      switch (c) {\n        case MAT_NAME:\n          material.name = this.readString(data, 64);\n          this.log(\" -> name: \" + material.name);\n          break;\n\n        case MAT_AMBIENT:\n          material.ambientColor = this.readColor(data);\n          this.log(\" -> ambientColor: \" + material.ambientColor.toString(16));\n          break;\n\n        case MAT_DIFFUSE:\n          material.diffuseColor = this.readColor(data);\n          this.log(\" -> diffuseColor: \" + material.diffuseColor.toString(16));\n          break;\n\n        case MAT_SPECULAR:\n          material.specularColor = this.readColor(data);\n          this.log(\" -> specularColor: \" + material.specularColor.toString(16));\n          break;\n\n        default:\n          this.log(\" -> Unknown material chunk: \" + c.toString(16));\n          break;\n      }\n\n      c = this.nextChunk(data, chunk);\n    }\n\n    this.endChunk(chunk);\n    this.materials[material.name] = material;\n  };\n\n  p.readColor = function (data) {\n    var chunk = this.readChunk(data);\n    var color = 0;\n\n    switch (chunk.id) {\n      case COLOR_24:\n      case LIN_COLOR_24:\n        var r = this.readByte(data);\n        var g = this.readByte(data);\n        var b = this.readByte(data);\n        color = r << 16 | g << 8 | b;\n        break;\n\n      case COLOR_F:\n      case LIN_COLOR_F:\n        var r = this.readFloat(data);\n        var g = this.readFloat(data);\n        var b = this.readFloat(data);\n        color = Math.floor(r * 255) << 16 | Math.floor(g * 255) << 8 | Math.floor(b * 255);\n        break;\n\n      default:\n        this.log(\"Unknown color chunk: \" + c.toString(16));\n        break;\n    }\n\n    this.endChunk(chunk);\n    return color;\n  };\n\n  p.readMesh = function (data) {\n    var chunk = this.readChunk(data);\n    var c = this.nextChunk(data, chunk);\n    var mesh = new Lib3dsMesh();\n    var i, j;\n\n    while (c != 0) {\n      switch (c) {\n        case MESH_COLOR:\n          mesh.color = this.readByte(data);\n          this.log(\" -> color: \" + mesh.color);\n          break;\n\n        case POINT_ARRAY:\n          mesh.points = this.readWord(data);\n          mesh.pointL = [];\n          this.log(\" -> #points: \" + mesh.points + \" \" + this.position);\n\n          for (i = 0; i < mesh.points; i++) {\n            var vec = [];\n\n            for (j = 0; j < 3; j++) {\n              vec.push(this.readFloat(data));\n            }\n\n            mesh.pointL.push(vec);\n          }\n\n          break;\n\n        case FACE_ARRAY:\n          this.resetPosition(data);\n          this.readFaceArray(data, mesh);\n          break;\n\n        case TEX_VERTS:\n          mesh.texels = this.readWord(data);\n          mesh.texelL = [];\n          this.log(\" -> #texels: \" + mesh.texels);\n\n          for (i = 0; i < mesh.texels; i++) {\n            mesh.texelL.push([this.readFloat(data), this.readFloat(data)]);\n          }\n\n          break;\n\n        case MESH_MATRIX:\n        case POINT_FLAG_ARRAY:\n        case MESH_TEXTURE_INFO:\n        default:\n          this.log(\" -> Unknown mesh chunk: \" + c.toString(16));\n          break;\n      }\n\n      c = this.nextChunk(data, chunk);\n    }\n\n    this.endChunk(chunk);\n    return mesh;\n  };\n\n  p.readFaceArray = function (data, mesh) {\n    var chunk = this.readChunk(data);\n    var i, j;\n    mesh.faces = this.readWord(data);\n    mesh.faceL = [];\n    this.log(\" -> #faces: \" + mesh.faces);\n\n    for (i = 0; i < mesh.faces; ++i) {\n      var face = new Lib3dsFace();\n      face.points = [];\n      face.points.push(this.readWord(data));\n      face.points.push(this.readWord(data));\n      face.points.push(this.readWord(data)); // visibility I believe (0 or 1)\n\n      face.flags = this.readWord(data);\n      mesh.faceL.push(face);\n    } // Thr rest of the FACE_ARRAY chunk is subchunks\n\n\n    while (this.position < chunk.end) {\n      var chunk = this.readChunk(data);\n\n      switch (chunk.id) {\n        case MSH_MAT_GROUP:\n          this.log(\" -> MATERIAL_GROUP\");\n          this.resetPosition(data);\n          var materialGroup = this.readMaterialGroup(data);\n          var faceIdxs = materialGroup.faceIdxs;\n\n          for (i = 0; i < faceIdxs.length; i++) {\n            var face = mesh.faceL[faceIdxs[i]];\n            face.material = materialGroup.name;\n          }\n\n          break;\n\n        case SMOOTH_GROUP:\n        default:\n          this.log(\" -> Unknown face array chunk: \" + c.toString(16));\n          break;\n      }\n\n      this.endChunk(chunk);\n    }\n\n    this.endChunk(chunk);\n  };\n\n  p.readMaterialGroup = function (data) {\n    var chunk = this.readChunk(data);\n    var materialName = this.readString(data, 64);\n    var numFaces = this.readWord(data);\n    this.log(\" --> material name: \" + materialName);\n    this.log(\" --> num faces: \" + numFaces);\n    var faceIdxs = [];\n\n    for (var i = 0; i < numFaces; ++i) {\n      faceIdxs.push(this.readWord(data));\n    }\n\n    return {\n      name: materialName,\n      faceIdxs: faceIdxs\n    };\n  };\n\n  p.readNamedObject = function (data) {\n    var chunk = this.readChunk(data);\n    var name = this.readString(data, 64);\n    this.log(\" -> \" + name);\n    chunk.cur = this.position;\n    var c = this.nextChunk(data, chunk);\n\n    while (c != 0) {\n      switch (c) {\n        case N_TRI_OBJECT:\n          this.resetPosition(data);\n          var mesh = this.readMesh(data);\n          this.meshes.push(mesh);\n          break;\n\n        default:\n          this.log(\"Unknown named object chunk: \" + c.toString(16));\n          break;\n      }\n\n      c = this.nextChunk(data, chunk);\n    }\n\n    this.endChunk(chunk);\n  };\n\n  p.readChunk = function (data) {\n    var chunk = new Lib3dsChunk();\n    chunk.cur = this.position;\n    chunk.id = this.readWord(data);\n    chunk.size = this.readDWord(data);\n    chunk.end = chunk.cur + chunk.size;\n    chunk.cur += 6;\n    return chunk;\n  };\n\n  p.endChunk = function (chunk) {\n    this.position = chunk.end;\n  };\n\n  p.nextChunk = function (data, chunk) {\n    if (chunk.cur >= chunk.end) {\n      return 0;\n    }\n\n    this.position = chunk.cur;\n\n    try {\n      var next = this.readChunk(data);\n      chunk.cur += next.size;\n      return next.id;\n    } catch (e) {\n      this.log('Unable to read chunk at ' + this.position);\n      return 0;\n    }\n  };\n\n  p.resetPosition = function (data, chunk) {\n    this.position -= 6;\n  };\n\n  p.readByte = function (data) {\n    var v = data.getUint8(this.position);\n    this.position += 1;\n    return v;\n  };\n\n  p.readFloat = function (data) {\n    try {\n      var v = data.getFloat32(this.position);\n      this.position += 4;\n      return v;\n    } catch (e) {\n      this.log(\"\" + e + \" \" + this.position + \" \" + data.byteLength);\n    }\n  };\n\n  p.readInt = function (data) {\n    var v = data.getInt32(this.position);\n    this.position += 4;\n    return v;\n  };\n\n  p.readShort = function (data) {\n    var v = data.getInt16(this.position);\n    this.position += 2;\n    return v;\n  };\n\n  p.readDWord = function (data) {\n    var v = data.getUint32(this.position);\n    this.position += 4;\n    return v;\n  };\n\n  p.readWord = function (data) {\n    var v = data.getUint16(this.position);\n    this.position += 2;\n    return v;\n  };\n\n  p.readString = function (data, maxLength) {\n    var s = \"\";\n\n    for (var i = 0; i < maxLength; i++) {\n      var c = this.readByte(data);\n      if (!c) break;\n      s += String.fromCharCode(c);\n    }\n\n    return s;\n  };\n\n  p.log = function (msg) {\n    if (this.debug) {\n      console.log(msg);\n\n      if (this.element) {\n        this.element.innerHTML += msg + \"<br/>\";\n      }\n    }\n  };\n})();\n\nvar Lib3dsChunk = function Lib3dsChunk() {\n  this.cur = 0;\n  this.id = 0;\n  this.size = 0;\n  this.end = 0;\n};\n\nvar Lib3dsFace = function Lib3dsFace() {\n  this.flags = 0;\n  this.points = [];\n  this.material = \"\";\n};\n\nvar Lib3dsMesh = function Lib3dsMesh() {\n  this.next = null;\n  this.matrix = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n  this.name = \"\";\n  this.color = 0;\n  this.points = 0;\n  this.pointL = [];\n  this.flags = 0;\n  this.flagL = [];\n  this.texels = 0;\n  this.texelL = [];\n  this.faces = 0;\n  this.faceL = [];\n};\n\nvar Lib3dsMaterial = function Lib3dsMaterial() {\n  this.name = \"\";\n  this.ambientColor = 0;\n  this.diffuseColor = 0;\n  this.spectralColor = 0;\n};\n\nmodule.exports = Lib3ds;\n\n//# sourceURL=webpack:///./src/lib/lib3ds.js?");

/***/ }),

/***/ "./src/plugin.webgl.3ds.js":
/*!*********************************!*\
  !*** ./src/plugin.webgl.3ds.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _lib3ds = _interopRequireDefault(__webpack_require__(/*! lib/lib3ds.js */ \"./src/lib/lib3ds.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/** ********** *\n *\n * Based on lib3ds.js, transform *.3ds files to JSON structrue\n * - https://github.com/timknip/js3ds/blob/master/js/lib3ds.js\n *\n * ********** **/\nfunction loader3DS(url, callback) {\n  var req = new XMLHttpRequest();\n\n  if (req.overrideMimeType) {\n    req.overrideMimeType(\"text/plain; charset=x-user-defined\"); // urgh, that took a while to google\n  }\n\n  req.onreadystatechange = function () {\n    if (req.readyState == 4) {\n      if (req.status == 0 || req.status == 200) {\n        // @0 is some div to log some stuff, ie: document.getElementById(\"myDebugDiv\")\n        // @1 is a boolean indicating whether to log\n        var res = new _lib3ds[\"default\"](false, false);\n        res.readFile(req.responseText);\n        var data = []; // loop over the parsed meshes\n\n        for (var i = 0; i < res.meshes.length; i++) {\n          var vertices = [];\n          var indices = [];\n          var textures = []; // var colors = [];\n\n          var mesh = res.meshes[i]; // a mesh is of type Lib3dsMesh\n          // vertices\n\n          for (var j = 0; j < mesh.points; j++) {\n            var vert = mesh.pointL[j]; // a vert is an Array(3)\n\n            vertices.push(vert[0]);\n            vertices.push(vert[1]);\n            vertices.push(vert[2]);\n          } // faces\n\n\n          for (j = 0; j < mesh.faces; j++) {\n            var face = mesh.faceL[j]; // a face is of type Lib3dsFace\n            // indices into the vert array above\n\n            var idx0 = face.points[0];\n            var idx1 = face.points[1];\n            var idx2 = face.points[2];\n            indices.push(idx0);\n            indices.push(idx1);\n            indices.push(idx2); // so the face vertices are:\n            // var v0 = mesh.pointL[ idx0 ];\n            // var v1 = mesh.pointL[ idx1 ];\n            // var v2 = mesh.pointL[ idx2 ];\n            // and the material for the face is:\n            // var materialName = face.material;\n            // var material = res.materials[materialName];\n            // if (material) {\n            //     // var useColor = material.ambientColor;\n            //     // var useColor = material.specularColor;\n            //     var useColor = material.diffuseColor;\n            //     if (useColor !== undefined) {\n            //         var current = '000000' + Number(useColor).toString(16);\n            //         colors.push(parseInt(current.substr(-6,2), 16));\n            //         colors.push(parseInt(current.substr(-4,2), 16));\n            //         colors.push(parseInt(current.substr(-2,2), 16));\n            //     }\n            // }\n          } // texels / uv: guess you can use the face indices above\n\n\n          for (j = 0; j < mesh.texels; j++) {\n            var uv = mesh.texelL[j];\n            var u = uv[0];\n            var v = uv[1];\n            textures.push(u);\n            textures.push(1 - v);\n          }\n\n          data.push({\n            vertices: vertices,\n            indices: indices,\n            textures: textures,\n            img: mesh.faceL[0] && mesh.faceL[0].material\n          });\n        }\n\n        callback(data, res);\n      }\n    }\n  };\n\n  req.open(\"GET\", url, true);\n  req.send(null);\n}\n\n;\n\nvar classInit = function classInit(opt) {\n  if (!opt.webgl || !opt.webgl._3ds) {\n    return;\n  }\n\n  var _3dsUrl = opt.webgl._3ds;\n  var _3dsImg = opt.webgl._3dsImg;\n  var useCache = opt.webgl.cache !== false;\n  var sprite = this;\n  loader3DS(_3dsUrl, function (data) {\n    sprite.webgl = {};\n    delete opt.webgl._3ds;\n    delete opt.webgl.cache;\n    data.forEach(function (model) {\n      var imgOrColors = _3dsImg && _3dsImg[model.img];\n      sprite.add({\n        name: model.img,\n        webgl: Object.assign(window.Easycanvas.webglShapes.custom({\n          vertices: model.vertices,\n          indices: model.indices,\n          img: !(imgOrColors instanceof Array) && imgOrColors,\n          textures: model.textures,\n          colors: imgOrColors instanceof Array && imgOrColors\n        }), opt.webgl)\n      });\n    });\n    sprite.trigger('webgl-3ds-loaded');\n  }, useCache);\n};\n\nvar inBrowser = typeof window !== 'undefined';\n\nif (inBrowser && window.Easycanvas) {\n  window.Easycanvas.loader3DS = loader3DS;\n  Easycanvas.extend(classInit);\n} else {\n  module.exports = {\n    loader3DS: loader3DS,\n    classInit: classInit\n  };\n}\n\n//# sourceURL=webpack:///./src/plugin.webgl.3ds.js?");

/***/ }),

/***/ 7:
/*!***************************************!*\
  !*** multi ./src/plugin.webgl.3ds.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./src/plugin.webgl.3ds.js */\"./src/plugin.webgl.3ds.js\");\n\n\n//# sourceURL=webpack:///multi_./src/plugin.webgl.3ds.js?");

/***/ })

/******/ })));